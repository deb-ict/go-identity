// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_oauth is a generated GoMock package.
package mock_oauth

import (
	context "context"
	reflect "reflect"

	oauth "github.com/deb-ict/go-identity/pkg/oauth"
	gomock "github.com/golang/mock/gomock"
)

// MockOAuthService is a mock of OAuthService interface.
type MockOAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthServiceMockRecorder
}

// MockOAuthServiceMockRecorder is the mock recorder for MockOAuthService.
type MockOAuthServiceMockRecorder struct {
	mock *MockOAuthService
}

// NewMockOAuthService creates a new mock instance.
func NewMockOAuthService(ctrl *gomock.Controller) *MockOAuthService {
	mock := &MockOAuthService{ctrl: ctrl}
	mock.recorder = &MockOAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthService) EXPECT() *MockOAuthServiceMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockOAuthService) CreateAccessToken(ctx context.Context, accessToken *oauth.AccessToken) (*oauth.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(*oauth.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockOAuthServiceMockRecorder) CreateAccessToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockOAuthService)(nil).CreateAccessToken), ctx, accessToken)
}

// CreateAuthorizationCode mocks base method.
func (m *MockOAuthService) CreateAuthorizationCode(ctx context.Context, authorizationCode *oauth.AuthorizationCode) (*oauth.AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizationCode", ctx, authorizationCode)
	ret0, _ := ret[0].(*oauth.AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizationCode indicates an expected call of CreateAuthorizationCode.
func (mr *MockOAuthServiceMockRecorder) CreateAuthorizationCode(ctx, authorizationCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizationCode", reflect.TypeOf((*MockOAuthService)(nil).CreateAuthorizationCode), ctx, authorizationCode)
}

// CreateRefreshToken mocks base method.
func (m *MockOAuthService) CreateRefreshToken(ctx context.Context, refreshToken *oauth.RefreshToken) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockOAuthServiceMockRecorder) CreateRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockOAuthService)(nil).CreateRefreshToken), ctx, refreshToken)
}

// DeleteAccessToken mocks base method.
func (m *MockOAuthService) DeleteAccessToken(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessToken indicates an expected call of DeleteAccessToken.
func (mr *MockOAuthServiceMockRecorder) DeleteAccessToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessToken", reflect.TypeOf((*MockOAuthService)(nil).DeleteAccessToken), ctx, id)
}

// DeleteAuthorizationCode mocks base method.
func (m *MockOAuthService) DeleteAuthorizationCode(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizationCode", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorizationCode indicates an expected call of DeleteAuthorizationCode.
func (mr *MockOAuthServiceMockRecorder) DeleteAuthorizationCode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizationCode", reflect.TypeOf((*MockOAuthService)(nil).DeleteAuthorizationCode), ctx, id)
}

// DeleteRefreshToken mocks base method.
func (m *MockOAuthService) DeleteRefreshToken(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockOAuthServiceMockRecorder) DeleteRefreshToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockOAuthService)(nil).DeleteRefreshToken), ctx, id)
}

// GenerateAccessToken mocks base method.
func (m *MockOAuthService) GenerateAccessToken(ctx context.Context, client *oauth.Client, user *oauth.User, scopes []string) (*oauth.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, client, user, scopes)
	ret0, _ := ret[0].(*oauth.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockOAuthServiceMockRecorder) GenerateAccessToken(ctx, client, user, scopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockOAuthService)(nil).GenerateAccessToken), ctx, client, user, scopes)
}

// GenerateRefreshToken mocks base method.
func (m *MockOAuthService) GenerateRefreshToken(ctx context.Context, client *oauth.Client, accessToken *oauth.AccessToken) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", ctx, client, accessToken)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockOAuthServiceMockRecorder) GenerateRefreshToken(ctx, client, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockOAuthService)(nil).GenerateRefreshToken), ctx, client, accessToken)
}

// GetAccessTokenById mocks base method.
func (m *MockOAuthService) GetAccessTokenById(ctx context.Context, id string) (*oauth.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenById", ctx, id)
	ret0, _ := ret[0].(*oauth.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenById indicates an expected call of GetAccessTokenById.
func (mr *MockOAuthServiceMockRecorder) GetAccessTokenById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenById", reflect.TypeOf((*MockOAuthService)(nil).GetAccessTokenById), ctx, id)
}

// GetAuthorizationCodeByCode mocks base method.
func (m *MockOAuthService) GetAuthorizationCodeByCode(ctx context.Context, code string) (*oauth.AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationCodeByCode", ctx, code)
	ret0, _ := ret[0].(*oauth.AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationCodeByCode indicates an expected call of GetAuthorizationCodeByCode.
func (mr *MockOAuthServiceMockRecorder) GetAuthorizationCodeByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationCodeByCode", reflect.TypeOf((*MockOAuthService)(nil).GetAuthorizationCodeByCode), ctx, code)
}

// GetClientByClientId mocks base method.
func (m *MockOAuthService) GetClientByClientId(ctx context.Context, clientId string) (*oauth.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByClientId", ctx, clientId)
	ret0, _ := ret[0].(*oauth.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByClientId indicates an expected call of GetClientByClientId.
func (mr *MockOAuthServiceMockRecorder) GetClientByClientId(ctx, clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByClientId", reflect.TypeOf((*MockOAuthService)(nil).GetClientByClientId), ctx, clientId)
}

// GetRefreshTokenByToken mocks base method.
func (m *MockOAuthService) GetRefreshTokenByToken(ctx context.Context, token string) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenByToken", ctx, token)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenByToken indicates an expected call of GetRefreshTokenByToken.
func (mr *MockOAuthServiceMockRecorder) GetRefreshTokenByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenByToken", reflect.TypeOf((*MockOAuthService)(nil).GetRefreshTokenByToken), ctx, token)
}

// GetUserById mocks base method.
func (m *MockOAuthService) GetUserById(ctx context.Context, id string) (*oauth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*oauth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockOAuthServiceMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockOAuthService)(nil).GetUserById), ctx, id)
}

// GetUserByUserName mocks base method.
func (m *MockOAuthService) GetUserByUserName(ctx context.Context, username string) (*oauth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", ctx, username)
	ret0, _ := ret[0].(*oauth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockOAuthServiceMockRecorder) GetUserByUserName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockOAuthService)(nil).GetUserByUserName), ctx, username)
}

// UpdateRefreshToken mocks base method.
func (m *MockOAuthService) UpdateRefreshToken(ctx context.Context, id string, refreshToken *oauth.RefreshToken) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", ctx, id, refreshToken)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockOAuthServiceMockRecorder) UpdateRefreshToken(ctx, id, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockOAuthService)(nil).UpdateRefreshToken), ctx, id, refreshToken)
}

// VerifyClientSecret mocks base method.
func (m *MockOAuthService) VerifyClientSecret(ctx context.Context, client *oauth.Client, clientSecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyClientSecret", ctx, client, clientSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyClientSecret indicates an expected call of VerifyClientSecret.
func (mr *MockOAuthServiceMockRecorder) VerifyClientSecret(ctx, client, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyClientSecret", reflect.TypeOf((*MockOAuthService)(nil).VerifyClientSecret), ctx, client, clientSecret)
}

// VerifyUserPassword mocks base method.
func (m *MockOAuthService) VerifyUserPassword(ctx context.Context, user *oauth.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserPassword", ctx, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserPassword indicates an expected call of VerifyUserPassword.
func (mr *MockOAuthServiceMockRecorder) VerifyUserPassword(ctx, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserPassword", reflect.TypeOf((*MockOAuthService)(nil).VerifyUserPassword), ctx, user, password)
}

// MockClientStore is a mock of ClientStore interface.
type MockClientStore struct {
	ctrl     *gomock.Controller
	recorder *MockClientStoreMockRecorder
}

// MockClientStoreMockRecorder is the mock recorder for MockClientStore.
type MockClientStoreMockRecorder struct {
	mock *MockClientStore
}

// NewMockClientStore creates a new mock instance.
func NewMockClientStore(ctrl *gomock.Controller) *MockClientStore {
	mock := &MockClientStore{ctrl: ctrl}
	mock.recorder = &MockClientStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientStore) EXPECT() *MockClientStoreMockRecorder {
	return m.recorder
}

// GetClientByClientId mocks base method.
func (m *MockClientStore) GetClientByClientId(ctx context.Context, clientId string) (*oauth.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByClientId", ctx, clientId)
	ret0, _ := ret[0].(*oauth.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByClientId indicates an expected call of GetClientByClientId.
func (mr *MockClientStoreMockRecorder) GetClientByClientId(ctx, clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByClientId", reflect.TypeOf((*MockClientStore)(nil).GetClientByClientId), ctx, clientId)
}

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserStore) GetUserById(ctx context.Context, id string) (*oauth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*oauth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserStoreMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserStore)(nil).GetUserById), ctx, id)
}

// GetUserByUserName mocks base method.
func (m *MockUserStore) GetUserByUserName(ctx context.Context, username string) (*oauth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", ctx, username)
	ret0, _ := ret[0].(*oauth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockUserStoreMockRecorder) GetUserByUserName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockUserStore)(nil).GetUserByUserName), ctx, username)
}

// MockAccessTokenStore is a mock of AccessTokenStore interface.
type MockAccessTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenStoreMockRecorder
}

// MockAccessTokenStoreMockRecorder is the mock recorder for MockAccessTokenStore.
type MockAccessTokenStoreMockRecorder struct {
	mock *MockAccessTokenStore
}

// NewMockAccessTokenStore creates a new mock instance.
func NewMockAccessTokenStore(ctrl *gomock.Controller) *MockAccessTokenStore {
	mock := &MockAccessTokenStore{ctrl: ctrl}
	mock.recorder = &MockAccessTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenStore) EXPECT() *MockAccessTokenStoreMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockAccessTokenStore) CreateAccessToken(ctx context.Context, accessToken *oauth.AccessToken) (*oauth.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(*oauth.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockAccessTokenStoreMockRecorder) CreateAccessToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockAccessTokenStore)(nil).CreateAccessToken), ctx, accessToken)
}

// DeleteAccessToken mocks base method.
func (m *MockAccessTokenStore) DeleteAccessToken(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessToken indicates an expected call of DeleteAccessToken.
func (mr *MockAccessTokenStoreMockRecorder) DeleteAccessToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessToken", reflect.TypeOf((*MockAccessTokenStore)(nil).DeleteAccessToken), ctx, id)
}

// GetAccessTokenById mocks base method.
func (m *MockAccessTokenStore) GetAccessTokenById(ctx context.Context, id string) (*oauth.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenById", ctx, id)
	ret0, _ := ret[0].(*oauth.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenById indicates an expected call of GetAccessTokenById.
func (mr *MockAccessTokenStoreMockRecorder) GetAccessTokenById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenById", reflect.TypeOf((*MockAccessTokenStore)(nil).GetAccessTokenById), ctx, id)
}

// MockRefreshTokenStore is a mock of RefreshTokenStore interface.
type MockRefreshTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenStoreMockRecorder
}

// MockRefreshTokenStoreMockRecorder is the mock recorder for MockRefreshTokenStore.
type MockRefreshTokenStoreMockRecorder struct {
	mock *MockRefreshTokenStore
}

// NewMockRefreshTokenStore creates a new mock instance.
func NewMockRefreshTokenStore(ctrl *gomock.Controller) *MockRefreshTokenStore {
	mock := &MockRefreshTokenStore{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenStore) EXPECT() *MockRefreshTokenStoreMockRecorder {
	return m.recorder
}

// CreateRefreshToken mocks base method.
func (m *MockRefreshTokenStore) CreateRefreshToken(ctx context.Context, refreshToken *oauth.RefreshToken) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockRefreshTokenStoreMockRecorder) CreateRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockRefreshTokenStore)(nil).CreateRefreshToken), ctx, refreshToken)
}

// DeleteRefreshToken mocks base method.
func (m *MockRefreshTokenStore) DeleteRefreshToken(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockRefreshTokenStoreMockRecorder) DeleteRefreshToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockRefreshTokenStore)(nil).DeleteRefreshToken), ctx, id)
}

// GetRefreshTokenByToken mocks base method.
func (m *MockRefreshTokenStore) GetRefreshTokenByToken(ctx context.Context, token string) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenByToken", ctx, token)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenByToken indicates an expected call of GetRefreshTokenByToken.
func (mr *MockRefreshTokenStoreMockRecorder) GetRefreshTokenByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenByToken", reflect.TypeOf((*MockRefreshTokenStore)(nil).GetRefreshTokenByToken), ctx, token)
}

// UpdateRefreshToken mocks base method.
func (m *MockRefreshTokenStore) UpdateRefreshToken(ctx context.Context, id string, refreshToken *oauth.RefreshToken) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", ctx, id, refreshToken)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockRefreshTokenStoreMockRecorder) UpdateRefreshToken(ctx, id, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockRefreshTokenStore)(nil).UpdateRefreshToken), ctx, id, refreshToken)
}

// MockAuthorizationCodeStore is a mock of AuthorizationCodeStore interface.
type MockAuthorizationCodeStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationCodeStoreMockRecorder
}

// MockAuthorizationCodeStoreMockRecorder is the mock recorder for MockAuthorizationCodeStore.
type MockAuthorizationCodeStoreMockRecorder struct {
	mock *MockAuthorizationCodeStore
}

// NewMockAuthorizationCodeStore creates a new mock instance.
func NewMockAuthorizationCodeStore(ctrl *gomock.Controller) *MockAuthorizationCodeStore {
	mock := &MockAuthorizationCodeStore{ctrl: ctrl}
	mock.recorder = &MockAuthorizationCodeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationCodeStore) EXPECT() *MockAuthorizationCodeStoreMockRecorder {
	return m.recorder
}

// CreateAuthorizationCode mocks base method.
func (m *MockAuthorizationCodeStore) CreateAuthorizationCode(ctx context.Context, authorizationCode *oauth.AuthorizationCode) (*oauth.AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizationCode", ctx, authorizationCode)
	ret0, _ := ret[0].(*oauth.AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizationCode indicates an expected call of CreateAuthorizationCode.
func (mr *MockAuthorizationCodeStoreMockRecorder) CreateAuthorizationCode(ctx, authorizationCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizationCode", reflect.TypeOf((*MockAuthorizationCodeStore)(nil).CreateAuthorizationCode), ctx, authorizationCode)
}

// DeleteAuthorizationCode mocks base method.
func (m *MockAuthorizationCodeStore) DeleteAuthorizationCode(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizationCode", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorizationCode indicates an expected call of DeleteAuthorizationCode.
func (mr *MockAuthorizationCodeStoreMockRecorder) DeleteAuthorizationCode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizationCode", reflect.TypeOf((*MockAuthorizationCodeStore)(nil).DeleteAuthorizationCode), ctx, id)
}

// GetAuthorizationCodeByCode mocks base method.
func (m *MockAuthorizationCodeStore) GetAuthorizationCodeByCode(ctx context.Context, code string) (*oauth.AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationCodeByCode", ctx, code)
	ret0, _ := ret[0].(*oauth.AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationCodeByCode indicates an expected call of GetAuthorizationCodeByCode.
func (mr *MockAuthorizationCodeStoreMockRecorder) GetAuthorizationCodeByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationCodeByCode", reflect.TypeOf((*MockAuthorizationCodeStore)(nil).GetAuthorizationCodeByCode), ctx, code)
}

// MockSecretHasher is a mock of SecretHasher interface.
type MockSecretHasher struct {
	ctrl     *gomock.Controller
	recorder *MockSecretHasherMockRecorder
}

// MockSecretHasherMockRecorder is the mock recorder for MockSecretHasher.
type MockSecretHasherMockRecorder struct {
	mock *MockSecretHasher
}

// NewMockSecretHasher creates a new mock instance.
func NewMockSecretHasher(ctrl *gomock.Controller) *MockSecretHasher {
	mock := &MockSecretHasher{ctrl: ctrl}
	mock.recorder = &MockSecretHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretHasher) EXPECT() *MockSecretHasherMockRecorder {
	return m.recorder
}

// HashSecret mocks base method.
func (m *MockSecretHasher) HashSecret(secret string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashSecret", secret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashSecret indicates an expected call of HashSecret.
func (mr *MockSecretHasherMockRecorder) HashSecret(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashSecret", reflect.TypeOf((*MockSecretHasher)(nil).HashSecret), secret)
}

// VerifySecret mocks base method.
func (m *MockSecretHasher) VerifySecret(hash, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySecret", hash, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySecret indicates an expected call of VerifySecret.
func (mr *MockSecretHasherMockRecorder) VerifySecret(hash, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySecret", reflect.TypeOf((*MockSecretHasher)(nil).VerifySecret), hash, secret)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockTokenGenerator) GenerateAccessToken(ctx context.Context, client *oauth.Client, user *oauth.User, scopes []string) (*oauth.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, client, user, scopes)
	ret0, _ := ret[0].(*oauth.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateAccessToken(ctx, client, user, scopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateAccessToken), ctx, client, user, scopes)
}

// GenerateRefreshToken mocks base method.
func (m *MockTokenGenerator) GenerateRefreshToken(ctx context.Context, client *oauth.Client, accessToken *oauth.AccessToken) (*oauth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", ctx, client, accessToken)
	ret0, _ := ret[0].(*oauth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockTokenGeneratorMockRecorder) GenerateRefreshToken(ctx, client, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateRefreshToken), ctx, client, accessToken)
}
